library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity decodificador is
port(
	clk 			: in std_logic;
	uni, dez, cen, mil 	: in std_logic_vector(3 downto 0);
	sel_digito		: out std_logic_vector(3 downto 0);
	segmentos		: out std_logic_vector(7 downto 0)
);
end decodificador;

architecture hardware of decodificador is
--signal digito_buffer : std_logic_vector(3 downto 0) := "1111"; -- Buffer que seleciona o digito que estara aceso;

begin

process(clk)
variable preescaler : integer range 0 to 50001;
variable seleciona_digito : integer range 0 to 4;
begin
	if clk'event and clk = '1' then
		preescaler := preescaler + 1;
		if preescaler = 50001 then
			preescaler := 0;
			seleciona_digito := seleciona_digito + 1;
			if seleciona_digito = 4 then
				seleciona_digito := 0;
			end if;
			--digito_buffer <= std_logic_vector(unsigned(digito_buffer) + 1);
		end if;
	end if;

case seleciona_digito is
	when 0 => sel_digito <= "0111";
	when 1 => sel_digito <= "1011";
	when 2 => sel_digito <= "1101";
	when 3 => sel_digito <= "1110";
	when others => sel_digito <= "1111";
end case;

if seleciona_digito = 0 then
	case uni is
		when "0000" => segmentos <= "00000011";
		when "0001" => segmentos <= "10011111";
		when "0010" => segmentos <= "00100101";
		when "0011" => segmentos <= "00001101";
		when "0100" => segmentos <= "10011001";
		when "0101" => segmentos <= "01001001";
		when "0110" => segmentos <= "01000001";
		when "0111" => segmentos <= "00011111";
		when "1000" => segmentos <= "00000001";
		when "1001" => segmentos <= "00001001";
		when others => segmentos <= "11111111";
	end case;
end if;

if seleciona_digito = 1 then
	case dez is
		when "0000" => segmentos <= "00000011";
		when "0001" => segmentos <= "10011111";
		when "0010" => segmentos <= "00100101";
		when "0011" => segmentos <= "00001101";
		when "0100" => segmentos <= "10011001";
		when "0101" => segmentos <= "01001001";
		when "0110" => segmentos <= "01000001";
		when "0111" => segmentos <= "00011111";
		when "1000" => segmentos <= "00000001";
		when "1001" => segmentos <= "00001001";
		when others => segmentos <= "11111111";
	end case;
end if;

if seleciona_digito = 2 then
	case cen is
		when "0000" => segmentos <= "00000011";
		when "0001" => segmentos <= "10011111";
		when "0010" => segmentos <= "00100101";
		when "0011" => segmentos <= "00001101";
		when "0100" => segmentos <= "10011001";
		when "0101" => segmentos <= "01001001";
		when "0110" => segmentos <= "01000001";
		when "0111" => segmentos <= "00011111";
		when "1000" => segmentos <= "00000001";
		when "1001" => segmentos <= "00001001";
		when others => segmentos <= "11111111";
	end case;
end if;

if seleciona_digito = 3 then
	case mil is
		when "0000" => segmentos <= "00000011";
		when "0001" => segmentos <= "10011111";
		when "0010" => segmentos <= "00100101";
		when "0011" => segmentos <= "00001101";
		when "0100" => segmentos <= "10011001";
		when "0101" => segmentos <= "01001001";
		when "0110" => segmentos <= "01000001";
		when "0111" => segmentos <= "00011111";
		when "1000" => segmentos <= "00000001";
		when "1001" => segmentos <= "00001001";
		when others => segmentos <= "11111111";
	end case;
end if;

end process;
--sel_digito <= digito_buffer;

end hardware;